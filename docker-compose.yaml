version: '3.8'

networks:
  mynet:
    driver: bridge

volumes:
  db_data:
  kibana_data:
  es_data:
  logstash_pipeline:
  prometheus_data:
  grafana_data:
  grafana_provisioning:
    driver: local

x-variables:
  elastic_password: &elastic_password 'parola'
  kibana_password: &kibana_password 'parola'

services:
  # MySQL Database
  mysql:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: tecnos_db
    networks:
      - mynet
    ports:
      - "3307:3306"
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 20s
      retries: 3

  # Spring Cloud Gateway
  tecnos-gateway:
    image: tecnos1999/tecnos-gateway:10.11.2024.01.21.22
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    networks:
      - mynet
    depends_on:
      - mysql
      - zipkin
      - logstash

  # Tecnos Service
  tecnos-service:
    image: tecnos1999/tecnos-server:10.11.2024.01.16.04
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8081:8081"
    networks:
      - mynet
    depends_on:
      - mysql
      - zipkin
      - logstash

  # Additional Tecnos Service
  tecnos-cloud:
    image: tecnos1999/tecnos-cloud:02.11.2024.18.21.15
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8082:8082"
    networks:
      - mynet
    depends_on:
      - mysql

  # Client Application
  clientapp:
    image: tecnos1999/tecnos-client:08.11.2024.20.39.44
    environment:
      REACT_APP_ENV: production
    ports:
      - "3000:3000"
    networks:
      - mynet
    depends_on:
      - tecnos-service

  # Admin Management Application
  tecnos-management:
    image: tecnos1999/tecnos-management:08.11.2024.20.40.33
    environment:
      REACT_APP_ENV: production
    ports:
      - "3001:3001"
    networks:
      - mynet
    depends_on:
      - tecnos-service

  # Zipkin Tracing Service
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    networks:
      - mynet
    ports:
      - "9411:9411"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9411/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch Service
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: elasticsearch
    environment:
      ELASTIC_PASSWORD: *elastic_password
      discovery.type: single-node
      cluster.name: elasticsearch
      bootstrap.memory_lock: 'true'
      ES_JAVA_OPTS: '-Xms1g -Xmx1g'
      xpack.security.enabled: 'true'
      xpack.security.http.ssl.enabled: 'false'
    networks:
      - mynet
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - es_data:/usr/share/elasticsearch/data

  # Kibana for Elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.1
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: *kibana_password
      TELEMETRY_ENABLED: 'false'
      bootstrap.memory_lock: 'true'
    networks:
      - mynet
    ports:
      - '5601:5601'
    depends_on:
      - elasticsearch
    volumes:
      - kibana_data:/usr/share/kibana/data

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.1
    container_name: logstash
    environment:
      ELASTIC_PASSWORD: *elastic_password
      bootstrap.memory_lock: 'true'
      CONFIG_STRING: |
        input {
          tcp {
            port => 3100
            codec => json_lines
          }
        }
        output {
          elasticsearch {
            hosts => ["http://elasticsearch:9200"]
            user => "elastic"
            password => "$${ELASTIC_PASSWORD}"
            ssl => false
          }
        }
    networks:
      - mynet
    ports:
      - "3100:3100"
    depends_on:
      - elasticsearch

  # Setup container for initializing Elasticsearch
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: setup
    environment:
      ELASTIC_PASSWORD: *elastic_password
      KIBANA_PASSWORD: *kibana_password
      bootstrap.memory_lock: 'true'
    command:
      - bash
      - -c
      - |
        echo "Waiting for Elasticsearch availability";
        until curl -s http://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 10; done;
        echo "Setting kibana_system password";
        until curl -s -X POST -u "elastic:$${ELASTIC_PASSWORD}" -H "Content-Type: application/json" \
          http://elasticsearch:9200/_security/user/kibana_system/_password \
          -d "{\"password\":\"$${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
    networks:
      - mynet

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - prometheus_data:/prometheus
    environment:
      PROMETHEUS_CONFIG: |
        global:
          scrape_interval: 15s
        scrape_configs:
          - job_name: 'spring-boot-apps'
            metrics_path: '/actuator/prometheus'
            scrape_interval: 5s
            static_configs:
              - targets:
                  - 'courses-auth-service:8083'
                  - 'courses-microservice:8082'
                  - 'gateway:8081'
    entrypoint:
      - /bin/sh
      - -c
      - |
        echo "$${PROMETHEUS_CONFIG}" > /etc/prometheus/prometheus.yml
        /bin/prometheus --config.file=/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    networks:
      - mynet

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: secret
    depends_on:
      - prometheus
    ports:
      - "3200:3000"
    networks:
      - mynet
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_provisioning:/etc/grafana/provisioning
    entrypoint:
      - /bin/sh
      - -c
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        mkdir -p /etc/grafana/provisioning/dashboards
        echo '
        apiVersion: 1
        datasources:
          - name: Prometheus
            type: prometheus
            access: proxy
            isDefault: true
            url: http://prometheus:9090
            version: 1
            editable: false
        ' > /etc/grafana/provisioning/datasources/datasource.yml
        /run.sh

